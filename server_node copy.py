import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
from std_msgs.msg import String
import math
from rclpy.qos import QoSProfile, ReliabilityPolicy

class LidarServiceNode(Node):
    def __init__(self):
        super().__init__('server_node')

        # Publisher ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á /robot_command
        self.publisher = self.create_publisher(String, '/robot_command', 10)

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô QoS ‡πÄ‡∏õ‡πá‡∏ô BEST_EFFORT ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö LiDAR
        qos_profile = QoSProfile(reliability=ReliabilityPolicy.BEST_EFFORT, depth=10)

        # Subscriber ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LiDAR
        self.subscription = self.create_subscription(
            LaserScan,
            '/scan',
            self.lidar_callback,
            qos_profile
        )

        self.stop_threshold = 0.16  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î

    def lidar_callback(self, msg):
        """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LiDAR ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ """
        self.get_logger().info(f"üì° LiDAR Callback Triggered! First 5 Ranges: {msg.ranges[:5]}")

        obstacle_detected = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

        for i, distance in enumerate(msg.ranges):
            if math.isinf(distance) or math.isnan(distance):
                self.get_logger().debug(f"‚ö†Ô∏è Ignoring invalid value at index {i}")
                continue  

            self.get_logger().info(f"üîç Checking: {distance:.3f} m at index {i}")

            if distance < self.stop_threshold:
                angle_radian = msg.angle_min + i * msg.angle_increment
                angle_degree = math.degrees(angle_radian) % 360
                self.get_logger().warn(f"‚ö†Ô∏è Obstacle Found: {angle_degree:.2f}¬∞ ‚û° STOP sent!")

                # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "stop" ‡πÑ‡∏õ‡∏ó‡∏µ‡πà /robot_command
                stop_msg = String()
                stop_msg.data = "stop"
                self.publisher.publish(stop_msg)

                obstacle_detected = True
                break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏

        if not obstacle_detected:
            self.get_logger().info("‚úÖ No obstacle detected, robot continues moving.")

def main():
    rclpy.init()
    node = LidarServiceNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
