import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from my_interface.srv import ControlRobot  # ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Service message ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
import numpy as np
import math

class ServiceNode(Node):
    def __init__(self):
        super().__init__('service_node')
        self.cli = self.create_client(ControlRobot, 'control_robot_service')
        
        while not self.cli.wait_for_service(timeout_sec=1.0):
            self.get_logger().warn('Waiting for service...')
        
        self.req = ControlRobot.Request()
        self.subscription = self.create_subscription(
            LaserScan,
            '/rp_scan',
            self.rp_lidar_callback,
            10)
        
        self.cmd_vel_pub = self.create_publisher(Twist, '/cmd_vel', 10)
        self.twist = Twist()
        self.Back_block = True  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

    def rp_lidar_callback(self, msg):
        """ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà """
        self.call_service()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Service ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà

        self.twist = Twist()
        obstacle_detected = False
        
        min_dist = 0.10
        max_dist = 0.40
        max_linear_speed = 0.24
        min_linear_speed = 0.10
        max_angular_speed = 0.50
        min_angular_speed = 0.10

        for i, distance in enumerate(msg.ranges):
            if math.isinf(distance) or math.isnan(distance):  
                continue

            if distance < max_dist:  
                obstacle_detected = True
                angle_radian = msg.angle_min + i * msg.angle_increment
                angle_degree = math.degrees(angle_radian) % 360
                distance_rounded = round(distance, 2)

                if distance_rounded < min_dist:
                    linear_speed = max_linear_speed  # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ min_dist ‡∏Å‡πá‡πÉ‡∏´‡πâ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                elif distance_rounded > max_dist:
                    linear_speed = 0  # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ max_dist ‡∏Å‡πá‡∏´‡∏¢‡∏∏‡∏î
                else:
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
                    linear_speed = ((distance_rounded - min_dist) / (max_dist - min_dist)) * (min_linear_speed - max_linear_speed) + max_linear_speed

                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì angular_speed ‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
                angular_speed = (1 - (distance_rounded - min_dist) / (max_dist - min_dist)) * max_angular_speed

                self.get_logger().info(f'üöÄ Backward Speed: Linear {linear_speed:.2f}, Angular {angular_speed:.2f}')

                if 255 <= angle_degree < 285:
                    self.get_logger().info(f"CCW: {distance_rounded} m, Angle: {angle_degree:.2f}¬∞")
                    self.twist.angular.z = angular_speed  # ‡∏´‡∏°‡∏∏‡∏ô CCW
                    self.twist.linear.x = 0.0 # ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
                elif 65 <= angle_degree < 105:
                    self.get_logger().info(f"CW: {distance_rounded} m, Angle: {angle_degree:.2f}¬∞")
                    self.twist.angular.z = -angular_speed  # ‡∏´‡∏°‡∏∏‡∏ô CW
                    self.twist.linear.x = 0.0 # ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
                elif 165 <= angle_degree < 195:
                    self.get_logger().info(f"Forward: {distance_rounded} m, Angle: {angle_degree:.2f}¬∞")
                    self.twist.linear.x = linear_speed
                    self.twist.angular.z = 0.0
                elif (345 <= angle_degree < 360 or 0 <= angle_degree < 15) and self.Back_block:
                    self.get_logger().info(f"Back: {distance_rounded} m")
                    # ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
                    self.twist.linear.x = -linear_speed
                    self.twist.angular.z = 0.0
                break

        self.cmd_vel_pub.publish(self.twist)

    def call_service(self):
        """ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà """
        future = self.cli.call_async(self.req)
        future.add_done_callback(self.handle_response)

    def handle_response(self, future):
        """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å ServerNode ‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô """
        try:
            response = future.result()
            if response.action == "stop":
                self.get_logger().warn("‚ùå Server: Stop detected, halting robot!")
                self.twist = Twist()  # ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
                self.cmd_vel_pub.publish(self.twist)
        except Exception as e:
            self.get_logger().error(f"Service call failed: {e}")


def main():
    rclpy.init()
    node = ServiceNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
