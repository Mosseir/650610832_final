import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
from std_msgs.msg import String
import math
from rclpy.qos import QoSProfile, ReliabilityPolicy

class LidarServiceNode(Node):
    def __init__(self):
        super().__init__('server_node')

        # Publisher ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á /robot_command
        self.publisher = self.create_publisher(String, '/robot_command', 10)

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô QoS ‡πÄ‡∏õ‡πá‡∏ô BEST_EFFORT ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö LiDAR
        qos_profile = QoSProfile(reliability=ReliabilityPolicy.BEST_EFFORT, depth=10)

        # Subscriber ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LiDAR
        self.subscription = self.create_subscription(
            LaserScan,
            '/scan',
            self.lidar_callback,
            qos_profile
        )

        self.stop_threshold = 0.16  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î
        self.prev_command = "resume"  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        self.obstacle_detected = False  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á

    def lidar_callback(self, msg):
        """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LiDAR ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ """
        self.get_logger().info(f"üì° LiDAR Callback Triggered! First 5 Ranges: {msg.ranges[:5]}")

        obstacle_detected = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

        for i, distance in enumerate(msg.ranges):
            if math.isinf(distance) or math.isnan(distance):
                self.get_logger().debug(f"‚ö†Ô∏è Ignoring invalid value at index {i}")
                continue  

            if distance < self.stop_threshold:
                obstacle_detected = True
                break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏

        # ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
        if obstacle_detected:
            if not self.obstacle_detected:  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á stop ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
                self.send_command("stop")
                self.obstacle_detected = True
        else:
            if self.obstacle_detected:  # ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
                self.send_command("resume")
                self.obstacle_detected = False

    def send_command(self, command):
        """ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á """
        if command != self.prev_command:
            msg = String()
            msg.data = command
            self.publisher.publish(msg)
            self.prev_command = command
            self.get_logger().info(f"üöÄ Command Sent: {command}")

def main():
    rclpy.init()
    node = LidarServiceNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
